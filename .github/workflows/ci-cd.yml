name: Angular CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Stage 1: Setup and Dependencies
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Generate cache key
        id: cache-keys
        run: echo "cache-key=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

  # Stage 2: Code Quality and Linting
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Check code formatting
        run: npm run format:check
        continue-on-error: true

  # Stage 3: Testing
  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        node-version: [20, 22]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

      # - name: Run e2e tests
      #   run: npm run e2e:ci

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: ./coverage/lcov.info
      #     flags: unittests
      #     name: codecov-umbrella
      #     token: ${{ secrets.CODECOV_TOKEN }}

  # Stage 4: Build and Security
  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Stage 5: Bundle Analysis (Optional - only on main branch)
  analyze:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: npm run analyze

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: dist/uk-tvs/stats.json

  # DEPLOYMENT STAGES - COMMENTED OUT FOR DEVELOPMENT
  # Uncomment and configure these when you're ready to deploy

  # # Stage 6: Deploy to Staging
  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: dist/
  #
  #     - name: Deploy to staging
  #       run: |
  #         echo "Deploying to staging environment..."
  #         # Add your deployment commands here
  #         # Examples:
  #         # - Deploy to Firebase Hosting
  #         # - Deploy to AWS S3
  #         # - Deploy to Netlify
  #         # - Deploy to Vercel

  # # Stage 7: Deploy to Production
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: dist/
  #
  #     - name: Deploy to production
  #       run: |
  #         echo "Deploying to production environment..."
  #         # Add your production deployment commands here

  # # Stage 8: Notify (Optional)
  # notify:
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging, deploy-production]
  #   if: always()
  #   steps:
  #     - name: Notify team
  #       if: failure()
  #       run: |
  #         echo "Pipeline failed! Notify the team."
  #         # Add notification logic (Slack, email, etc.)
  #
  #     - name: Success notification
  #       if: success()
  #       run: |
  #         echo "Pipeline completed successfully!"
  #         # Add success notification logic
